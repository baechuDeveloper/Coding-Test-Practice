package Union_Find;

public class About__Union_Find {

	/**
	 * '유니온 파인드'(Union Find)는 '서로소 집합'(Disjoint Set)그리고 '병합 찾기 집합'(Merge Find Set)이라고도 불리며
	 * 여러 서로소 집합의 정보를 저장하고 있는 자료구조를 의미합니다. 
	 * 
	 * 이 자료구조는 항상 여러 개의 트리 형태를 띄고 있으며, 그 트리 그룹(혹은 컴포넌트)들이 각각 하나의 집합입니다.
	 * 배열을 이용해서 Tree형태로 구현하며  {1,2,5,6,8}, {3,4}, {7} 의 경우에는 아래처럼 존재하고있다고 봅시다.
	 * 		
	 * 		   1			3		
	 * 		2 6 8			4			7
	 * 		     5
	 * 즉, 최상단 노드인 Root노드를 집합으로 구분하는 ID처럼 생각하면 됩니다. 
	 * {1,2,5,6,8}은 하나의 집합으로 1이라는 집합에 들어있습니다. {3,4}는 3이라는 집합에 있습니다. {7}은 7이라는 집합에 있습니다.
	
	
	 * 유니온 파인드는 2개의 연산을 사용합니다.
	 * 하나는 find연산으로, 어떤 정점의 루트를 찾아줍니다. 그래서 자신이 속한 그룹이 어딘지를 알수있죠.
	 * 정점 5인경우에 find연산을 적용한 경우 루트인 1을 보여줍니다. 이 말은 자신이 속한 그룹이 1이라는 말이죠.
	 * 이때 매번 자신의 부모로 올라가는 연산을 하기보다는 한번 연산을 했다면 그것을 메모이제이션으로 자신의 부모가 누구였는지 갱신합니다. 
	 * 그래서 연산과정이 매우줄고, 더욱이 루트가 달라졌어도 해야하는 연산이 줄어듭니다.
	 * 
	 * 다른 하나는 merge연산(혹은 union연산)입니다. 두 집합을 하나로 합쳐서 하나의 집합으로 만듭니다. 
	 * 정확히는 다른 하나의 집합을 자신의 부모로 둡니다. 그래서 자신은 그 그룹에게 속하게 되죠.
	 * 이때 누굴 루트로 할지는 순수히 작성자의 마음입니다. 또한 누가 루트가 되더라도 하나의 그룹으로 정해지기만 하면 되고 
	 * 누가 누군가의 부모로서 적용만 된다면 그 그룹이 갖고있던 전부가 다른 그룹에게 속하게 되므로 상관없이 잘 합쳐집니다.
	 
	 * https://m.blog.naver.com/kks227/220791837179
	 * */
	
}
