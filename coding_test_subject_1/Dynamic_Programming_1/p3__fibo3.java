package Dynamic_Programming_1;

import java.io.*;
//피보나치수 2 // 이건 하번 문제의 유형을 보아보자. 모르면 역시 노가다로해보는게 좋은것도 되더라
public class p3__fibo3{

	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		int N = Integer.parseInt(br.readLine());
		if(N == 1) System.out.println(1);
		else if(N==2) System.out.println(2);
		else {
			long[] T = new long[N+1];
			T[1] = 1;	// 1
			T[2] = 2;	// 00  11
			T[3] = 3;
			for(int i=4; i<=N; i++) {
				T[i] = T[i-1] + T[i-2];
				T[i] %= 15746;
			}
			
			/*
			  
			  T[4] = 5  = 3*2  - 1 
			  T[5] = 8  = 5*2  - 2
			  T[6] = 13 = 8*2  - 3
			  T[7] = 22 = 13*2 - 4
			  T[n] = T[n-1]*2 - (n-3) 
			 * */
			
	  /*T[3] = 3;	// 001 100 111
		T[4] = 5;	// 0000 0011 1001 1100 1111		//2+2 / 1+2+1
		T[5] = 8;	// 1+2+2 / 2+1+2/ 2+2+1

		 	0000 - 10000 00001 
		 	0011 - 10011 00111
		 	1001 - 11001 10011
		 	1100 - 11100 11001
		 	1111 - 11111			중복 10011 11001

		  	00100	번외

		T[6] = 13;	

		  000000 111111
		  000011 001001 001100 100001 100100 110000
		  001111 100111 110011 111001 111100
		  
		T[7] = 21;
		
		  0000001 0000100 0010000 1000000
		  00111   01011   01101   01110    10011   10101   10110   11001   11010   11100
		  011111  101111  110111  111011   111101  111110
		  1111111 
			 
		T[8] = 34
		00000000 = 1
		00000011 - 11000 10100 10010 10001 01100 01010 01001 00110 00101 00011	5!/2!*3! = 10
		00001111 - 111100 6!/4!*2! = 6*5/2 = 15	
		00111111 - 0111111	7!/6! = 7
		11111111 = 1	
		1 + 10 + 15 + 7 + 1 = 34
			 
			 */
			System.out.println(T[N]);
		}
	}

}