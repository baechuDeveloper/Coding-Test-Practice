package Dynamic_Programming_1;

public class About_DP {

	/** DP는 큰 문제를 작은 문제로 분할하여 계산하는 방식이다. 
	 *  직관적으로 보면 '테이블 만들고' 풀어온 결과를 기억해가며 그 다음의 문제에 '기억한 결과를 재사용'해서 더 큰 문제를 풀어가는 방식 
	 *  더 중요한것은 풀어놓은 작은 부분문제들의 답은 바뀌지 않는다. 즉 한번만 풀어져야 하고 더 쉽게 말하면 똑같은 작업이 반복이 되지는 않아야하며 그렇게 할것이다.
	 *  작은 문제들을 구해야하는 계산이 반복되어지는 형태에 한번 푼 문제 결과가 항상 같다면 DP를 사용할 수 있는 문제이기도 합니다.
	 *  분할정복과 다른점은 DP의 경우 작은 부분 문제의 답이 항상 같아야 한다는 것이다. 
	 *  
	 *  백트래킹은 탐색기법테크닉이며, DP는 테이블을 만들어가며 이를 점차 쌓아가는 혹은 길게 뻗은 결과물을 점차 뭉쳐가고, 기억해가는 '행동의 방법'을 말합니다.
	 *  '내리막길' 문제는 백트래킹 기법을 이용한 DFS방식의 '형태'를 잡고 그 내용물의 정보를 메모이제이션을 활용한 테이블을 기록해가는 Top-Down방식으로 
	 *  작은 결과값의 뭉치들이 다시 큰 뭉치를 만들어가며 테이블의 내용물을 채우고 또 그 내용물을 통해 다시 문제를 풀어갈 수 있게 합니다. 
	 *  이렇게 '내용물의 테이블'을 채우고 이용하기를 반복하는 형태가 DP라는 기법이며, 그 방향성은 백트래킹구조를 활용해서 진행을 도왔습니다.  **/
	
	/** DP는 큰 문제를 작은 문제로 분할하여 계산하는 방식이다.**/
	// '재귀'를 사용하면서 메모이제이션으로 기록한 걸 재사용하는 형태는 DP중 Top-Down방식이다. 
	// 반복문을 통해 작은 문제부터 시작해서 큰 문제로 확장하면서 문제를 해결하는 방식이 Bottom-Up 방식이다.
	// 보통 진정한(기초적인)DP를 점화식에 따른 bottom-up으로 생각하며, Top-Down처럼 재귀로 뻣어나가는 방식 또한 점화식과 비슷하므로 넓은 의미에서 동적계획법이라고 부릅니다.
	// Top-Down은 Top부터 시작해서 재귀를 활용해 현재 top에게 필요한 정보를 점차 내려가며 얻어가는 형태이다. 얻어낸 정보는 호출해준 Top에게 전달해준다. 
	// Bottom-Up 방식으로는 bottom부터 시작해서 정보를 올려주는 방식이다. 올라가며 결과를 함축해서 최종적인 끝부분의 결과를 얻어낸다.  
	
	/** 메모이제이션은 동일한 계산을 반복해야 할 때, 이전에 계산한 값을 메모리에 저장하여, 동일한 계산을 피해서 속도를 향상시켜주는 기법이다.**/

}
