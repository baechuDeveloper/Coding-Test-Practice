package Toplogical_Sort;

public class About__Toplogical_Sort {

	/**https://m.blog.naver.com/kks227/220800013823
	 * 이번에도 그래프입니다. 아직 그래프는 많이 남았어용
	 
	 * 이번에는 위상정렬(toplogical sort)이라는 걸 할 건데, 평소에 수를 정렬하던 것과 달리 이건 '유향 그래프'의 정점을 
	 * '정렬'합니다.
	 * 정렬을 한다고 하는데 어떻게 정렬하냐면... 정점을 왼쪽부터 오른쪽 방향으로 쭉 나열해 놓았을 때, 
	 * 오른쪽에 있는 정점에서 더 왼쪽의 정점으로 이동하는 간선이 하나도 없게 합니다.
	 * 그러니 오른쪽에서 왼쪽으로 방향을 역행을 하지 않다면 그래프에서 위상정렬을 했다고 할 수 있습니다.
	  
	 * 그래프에 따라 위상정렬의 결과가 '여러 개 일 수'도 있습니다. 
	 * 또한, 위상정렬이 '불가능한 경우'도 있는데... 이거 그래프에 '싸이클이 존재 할 때'입니다.
	 * 자기 자신으로 가는 크기 1인 싸이클 역시 대부분의 경우에 포함입니다. 
	  
	 * 따라서 위상정렬이 가능하려면 일단 그래프가 DAG(directed acyclic graph)의 형태를 띄어야 합니다.
	 * 이는 그냥 유향(directed)이고 싸이클이 없다는(acyclic) 뜻입니다.
	  
	 * 위상정렬이 필요한 경우는 그래프에서 반드시 자신보다 선행되어야 할 일을 다 끝내야만 작업에 들어갈 수 있는(방문할 수 있는) 조건이 주어질 때 입니다.
	 * 가장 대표적인 예시는 대학교 수업이나 RPG게임 스킬트리입니다. 
	 
	 
	 
	  위상정렬하는 방법 --------------------------------------------------------
	 * 1. 자신에게 들어올 간선이 없는 정점을 큐에 모두 넣는다. (진입차수indegree가 0인 정점이라고 한다.)
	 * 
	 * 2. 큐의 front 원소를 빼서 그 정점에서 나가는 간선을 모두 삭제한다. 
	 *    그리고 삭제하면서 indegree가 0이 된 새로운 정점이 생기면 그것들도 큐에 넣는다.
	 *    이것으로 그래프의 모든 정점이 큐에 들어오게 할 것이고, 그래프의 정점개수V만큼  큐가 다 비어질때까지 이 행동을 반복한다. 
	 *    
	 *    (물론 도중에 정점개수V번 만큼 돌기도 전에 큐가 비어버리면 위상 정렬이 불가능하다. 이미 삭제된 indegree가 0인 정점은 
	 *    구조상 다시는 못들어오는데 V번 돌기도 전에 더이상 들어올게 없다는 건, 
	 *    해당 그래프에 싸이클이 존재해서 indegree가 0인 정점이 더이상 보이지 않아 V번만큼 도달하지 못하고 그전에 끝나게 되었음을 알 수 있다.
	 *    그리고 V번 초과만큼 큐에 들어갈 수 는 없다. 이미 삭제된 정점은 indegree가 0이라서 들어왔고, 
	 *    초기에 들어온 것을 제외하고 어떤 방법으로든 다시 그 삭제된 정점을 지정할 수 없어서다.
	 *    만약 지정된다면 논리적으로 0이라서 삭제되었는데 갑자기 사실 그녀석 0이  아니였어 라는 꼴이 된다. 놀림받는다.) 
	 *    
	 * 3. 이때 큐에서 빼는 정점 순서가 위상 정렬 결과다.
	   ---------------------------------------------------------------------
	 * 
	 * 도중에 큐의 크기가 2 이상인 경우가 생긴다면, 위상 정렬 결과가 2개 이상이라는 의미가 있습니다.
	 * 매 선택지가 큐에 들어있는 것 중 아무거나 뺴는 것인데, 현재 큐에 들어온 것은 모두 indegree가 0인 정점뿐이라서
	 * 아무거나 빼도 위상정렬의 결과를 훼손하지 않기에 어떤게 먼저 뺴지냐에 따라 그 결과가 여러개가 가능합니다.
	 * 
	 * */
}
